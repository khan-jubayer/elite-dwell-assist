'use strict';

var assign = require('object-assign')

var hasOwn = function(obj, prop){
    return Object.prototype.hasOwnProperty.call(obj, prop)
}

var toUpperFirst = require('./toUpperFirst')
var constrainPicker = require('./constrainPicker')

function emptyFn(){}

function copyKeys(which, target, src){
    Object.keys(which).forEach(function(key){
        if (hasOwn(src, key)){
            target[key] = src[key]
        }
    })
}

var PROP_NAMES = {
    style    : true,
    className: true
}

module.exports = {

    _prepareWrapperProps: function(props) {

        var wrapperProps = assign({}, props.wrapperProps)

        copyKeys(PROP_NAMES, wrapperProps, props)

        return wrapperProps
    },

    _prepareFieldProps: function(props, state) {

        var fieldProps = assign({}, props)

        delete fieldProps.style
        delete fieldProps.className
        delete fieldProps.fieldProps
        delete fieldProps.defaultStyle
        delete fieldProps.readOnly

        assign(fieldProps, props.defaultFieldProps, props.fieldProps)

        if (props.readOnly){
            fieldProps.inputProps = assign({}, fieldProps.inputProps)
            fieldProps.inputProps.style = assign({
                cursor: 'pointer'
            }, fieldProps.inputProps.style)
        }

        fieldProps.ref = 'field'

        fieldProps.style       = assign({}, props.defaultFieldStyle, props.fieldStyle, fieldProps.style)
        fieldProps.onFocus     = this.handleFocus
        fieldProps.onBlur      = this.handleBlur
        fieldProps.onKeyDown   = (this.handleKeyDown || emptyFn).bind(this, props)
        fieldProps.onChange    = (this.handleChange || emptyFn).bind(this, props)

        delete fieldProps.data

        return fieldProps
    },

    _preparePickerProps: function(props) {
        var pickerProps   = assign({}, props.pickerProps)
        pickerProps.style = assign({}, props.defaultPickerStyle, props.pickerStyle, pickerProps.style)

        pickerProps.ref = "picker"

        return pickerProps
    },

    _constrainPicker: constrainPicker,

    _renderPicker: function(props, state){
        var pickerProps = props.pickerProps
        var visible     = state.pickerVisible

        if (!visible){
            pickerProps.style.display = 'none'
        }

        if (visible){
            if (props.constrainTo){
                ;(this.constrainPicker || this._constrainPicker)(props, pickerProps, props.constrainTo)
            }
        }

        var defaultFactory = this.props.defaultPickerFactory
        var picker = (props.pickerFactory || defaultFactory)(pickerProps)

        if (picker === undefined){
            picker = defaultFactory(pickerProps)
        }

        return picker
    },

    _isFocused: function(){
        return this.refs.field.isFocused()
    },

    _getInput: function(){
        return this.refs.field?
                    this.refs.field.getInput():
                    null
    },

    _focus: function(){
        this.refs.field.focus()
    },

    _notify: function(value, event) {
        this.refs.field.notify(value, event)
    },

    _isPickerVisible: function(){
        return this.props.pickerVisible == null?
                    this.state.pickerVisible:
                    this.props.pickerVisible
    }
}